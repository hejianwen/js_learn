1.执行上下文
   ·范围：一段<script>或者一个函数
   ·全局：变量定义、函数声明
   ·函数：变量定义、函数声明、this、arguments
  * 在全局、函数中，定义一个变量，或函数声明，执行前都会提升到代码的顶部，如果是给变量赋值，赋值过程仍然按照代码上下文顺序执行，不会提升到顶部，但函数声明会整体提升到顶部
  *函数表达式不会提升到顶部，函数声明可以
  *example 
       console.log(a); //undefined
       var a = 100;  //var a=undefined; 提升到顶
       var f=function(){} //var f;提升到顶
2.this
  要在执行时才能确认值，定义时无法确认
  ·作为构造函数执行
  ·作为对象属性执行
  ·作为普通函数执行
  ·	call apply bind
3.作用域
 ·无块级作用域
 ·有全局作用域和函数作用域
4.作用域链
   当前作用域没有定义的变量（自由变量），会一层一层在父作用域上找，直到全局，沿着一条链，只能由内到外，不能由外到内
5.闭包
  *在定义能确认值，
  ·使用场景
      函数作为返回值
      函数作为参数传递
      example 
         function F1(){
         var a =100;
         return function(){
         console.log(a)
         }
         }
          var f1 = F1();
          function F2(fn){
          var a = 200;
          fn();
          }

          F2(f1); //a=100




问题？？？？





1.说一下对变量提升的理解
 提升变量的定义，函数声明
2.说明this几种不同的使用场景

3.创建10个<a>标签，点击的时候弹出来对应的序号
for(let i=0;i<10;i++){
	(function(i){
	 var a = document.createElement('a');
	 a.innerHTML=i + '<br>';
	 a.addEventListener('click',function(e){
	  e.preventDefault();
	  alert(i);
	 })
	 document.body.appendChild(a);
	})(i);
}
4.如何理解作用域
  自由变量
   作用域链，及自由变量的查找
   闭包的两个场景
5.实际开发中闭包的作用
   封装变量，收敛权限