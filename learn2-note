1.构造函数
  标识符第一个字母大写
2.构造函数-扩展
  var a={} 其实是var a=new Oject()
   var a=[] 其实是var a=new Array()
3.原型规则和示例
   ·所有引用类型都有一个__proto__属性（隐式原型）
   ·所有函数都有一个prototype属性，（显示原型），属性值也是一个普通对象
   ·所有引用类型__proto__属性值指向他的构造函数的prototype属性值
   ·当试图得到一个对象的某个属性时，如果没有，就会去它的__proto__ （即她的的构造函数的prototype）中寻找
4.原型链
Object.prototype.__proto__ = null
5.instanceof
  判断引用类型属于哪个构造函数的方法




问题？？



1.如何准确判断一个变量是数组类型
   instanceof
2.写一个原型链继承的例子
 /*---------------------------------*/
  //动物
   function Animal(){
    this.eat = function(){
    console.log('animal eat');
    }
   }
  //狗
  function Dog(){
    this.bark　= function(){
      console.log('dog bark');
    }
  }
  Dog.prototype = new Animal();
  //哈士奇
  var hashqi = new Dog();
  //继承
  hashqi.eat();
  /*------------------------------*/
   //封装一个DOM查询例子
   function Elem(id){
      this.elem=document.getElementById(id);
   }
   Elem.prototype.html = function(val){
        var elem = this.elem;
        if(val){
          elem.innerHTML = val;
          return this;
        }else{
         return elem.innerHTML;
        }
   }
   Elem.prototype.on=function(type,fn){
    var elem= this.elem;
    elem.addEventListener(type.fn);
   }
   var div1 = new Elem('div1');
   console.log(div1.html());
   div1.on('click',function(){
   alert('clicked');
   })
3.描述new一个对象的过程
   创建一个新对象
   this指向这个新对象
   执行代码，即对this赋值
   返回this
4.zepto源码中如何使用原型链
